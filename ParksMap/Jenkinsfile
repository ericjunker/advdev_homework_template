// Jenkinsfile for ParksMap
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      //image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      image: "docker.io/ericjunker/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"
    sh "export version=1.0"
    // Set the tag for the development image: version + build number
    def devTag  = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `ParksMap`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance
    stage("Build application"){
      echo "Building appliction"
      //copy over nexus settings
      sh "cp ../nexys_settings.xml ."
      //GUID replacement should be done in setup_projects.sh
      //do the build
      sh "mvn -s ../nexus_settings.xml clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
    }
    stage("Tests"){
      //TBD
    }
    stage("Sonarqube"){
      //TBD
    }
    stage("Nexus"){
      //TBD
    }
    stage("Build Openshft image"){
      echo "Building Openshift Image"
      sh "oc start-build parksmap --follow --from-file=./target/parksmap.war -n ${GUID}-parks-dev"
      openshiftTag alias: 'false', destStream: 'parksmap', destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: "${GUID}-parks-dev", srcStream: 'parksmap', srcTag: 'latest', verbose: 'false'
    }
    stage("Deploy to Dev"){
      //update deployment config
      echo "Deploying to Dev"
      sh "oc set image dc/parksmap tasks=docker-registry.default.svc:5000/${GUID}-parks-dev/tasks:${devTag} -n ${GUID}-parks-dev"
      //actually deploy
      openshiftDeploy depCfg: 'parksmap', namespace: '${GUID}-parks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyDeployment depCfg: 'parksmap', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
       openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: 'parksmap', verbose: 'false'
    }
    stage ("copy image to nexus, again"){
      echo "Copying image to Nexus"
      sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/parksmap:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/parksmap:${devTag}"
      //tag image, TBH I'm still not sure what this does
      openshiftTag alias: 'false', destStream: 'parksmap', destTag: prodTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'parksmap', srcTag: devTag, verbose: 'false'
    }
    // Blue/Green Deployment into Production
    // -------------------------------------
    // Do not activate the new version yet.
    def destApp   = "parks-green"
    def activeApp = ""

    stage('Blue/Green Production Deployment') {
    activeApp = sh(returnStdout: true, script: "oc get route tasks -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'").trim()
    if (activeApp == "tasks-green") {
      destApp = "tasks-blue"
    }
    echo "Active Application:      " + activeApp
    echo "Destination Application: " + destApp

    // Update the Image on the Production Deployment Config
    sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-dev/tasks:${prodTag} -n ${GUID}-parks-prod"

    // Update the Config Map which contains the users for the Tasks application
    sh "oc delete configmap ${destApp}-config -n ${GUID}-parks-prod --ignore-not-found=true"
    sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${GUID}-parks-prod"

    // Deploy the inactive application.
    // Replace ${GUID}-parks-prod with the name of your production project
    openshiftDeploy depCfg: destApp, namespace: '${GUID}-parks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-parks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: '${GUID}-parks-prod', svcName: destApp, verbose: 'false'
    }
    stage("Switch to new version") {
     echo "Switching Production application to ${destApp}."
     sh 'oc patch route parks -n ${GUID}-parks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
